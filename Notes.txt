Detailed Description:
/app/: Main application folder that contains all the core functionality of your Flask app.

__init__.py: Initializes the Flask app, loads configurations, and imports necessary routes and models.
/models/: Contains the logic for MongoDB models (User and Conversation).
/routes/: Contains all your API route definitions (such as for user actions, chat interactions, and conversation-related actions).
/utils/: Utility folder for helper functions, including database connections or other services like Groq.
config.py: Contains Flask app settings and environment variables like the MongoDB URI and API keys.
/instance/: Folder for environment-specific configurations (kept outside version control for security). The .env file will contain environment variables like the MongoDB URI and API keys.

run.py: Entry point to run the Flask app. This is where you initialize the app and start the server.

requirements.txt: Lists all the project dependencies that need to be installed, including Flask, pymongo, dotenv, etc.














from fastapi import APIRouter, HTTPException, Response, Request
from database import user_collection
from utils.auth_helpers import hash_password, verify_password, create_jwt_token, decode_jwt_token
from models import SignUpModel, LoginModel
from bson import ObjectId
from typing import Optional

router = APIRouter()

def success_response(message: str, data: Optional[dict] = None):
    return {"message": message, "success": True, "data": data}

def error_response(message: str):
    return {"message": message, "success": False}

@router.post("/signup")
async def signup(data: SignUpModel):
    if user_collection.find_one({"username": data.username}):
        raise HTTPException(status_code=400, detail="Username already exists")

    hashed_password = hash_password(data.password)
    user_collection.insert_one({
        "email": data.email,
        "name": data.name,
        "username": data.username,
        "password": hashed_password,
    })
    return success_response("User created successfully!")

@router.post("/login")
async def login(response: Response, data: LoginModel):
    user = user_collection.find_one({"username": data.username})
    if user and verify_password(data.password, user["password"]):
        token = create_jwt_token(str(user["_id"]))
        response.set_cookie("access_token", token, httponly=True, max_age=86400)
        return success_response("Login successful!")

    raise HTTPException(status_code=400, detail="Invalid username or password")

@router.get("/check-auth")
async def check_auth(request: Request):
    token = request.cookies.get("access_token")
    if not token:
        raise HTTPException(status_code=403, detail="Token is missing")

    try:
        decoded_token = decode_jwt_token(token)
        user = user_collection.find_one({"_id": ObjectId(decoded_token["user_id"])})
        if not user:
            raise HTTPException(status_code=403, detail="User not found")
        return success_response("User authenticated", {"username": user["username"]})
    except:
        raise HTTPException(status_code=403, detail="Invalid token")

@router.post("/logout")
async def logout(response: Response):
    response.delete_cookie("access_token")
    return success_response("User logged out successfully!")


email and password for login 
and username and email are unique in new user 

from pydantic import BaseModel, EmailStr
from typing import Optional

class SignUpModel(BaseModel):
    email: EmailStr
    username: str
    password: str
    name: str

class LoginModel(BaseModel):
    username: str
    password: str


http://localhost:8000/docs 
for docs version